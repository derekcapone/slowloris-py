import psutil as psu
import helper_functions as hf


def get_cpu():
	# Attribute names for each namedtuple generated by psutil.
	# Not all are used but it is helpful to have them written out here.
	time_attribs = ['user', 'system', 'idle']
	perc_attribs =  'percent'

	time = psu.cpu_times()[:3]
	perc = psu.cpu_percent(interval=1)

	dict_time = dict(zip(time_attribs, time))
	dict_perc = {perc_attribs: perc}



	return dict_time, dict_perc


def get_mem():
	# Attribute names for each namedtuple generated by psutil.
	# Not all are used but it is helpful to have them written out here.
	swap_attribs = ['total', 'used', 'free', 'percent']
	virt_attribs = ['total', 'avail', 'used', 'free', 'active', 'inactive',
					'buffers', 'cached', 'shared', 'slab', 'wired']

	swap = psu.swap_memory()[:4]
	virt = psu.virtual_memory()

	dict_swap = dict(zip(swap_attribs, swap))
	dict_virt = dict(zip(virt_attribs, virt))

	return dict_swap, dict_virt


def get_dsk():
	# Attribute names for each namedtuple generated by psutil.
	# Not all are used but it is helpful to have them written out here.
	usage_attribs = ['total', 'used', 'free', 'percent']
	dskio_attribs = ['read_count', 'write_count', 'read_bytes', 'write_bytes']

	usage = psu.disk_usage('/')
	dskio = psu.disk_io_counters(nowrap=True)

	dict_usage = dict(zip(usage_attribs, usage))
	dict_dskio = dict(zip(dskio_attribs, dskio))

	return dict_usage, dict_dskio


def get_nwk():
	# Attribute names for each namedtuple generated by psutil.
	# Not all are used but it is helpful to have them written out here.
	cntr_attribs = ['bytes_sent', 'bytes_recv', 'packets_sent',
					'packets_recv', 'errin', 'errout', 'dropin', 'dropout']
	sckt_attribs = ['fd', 'family', 'type', 'laddr', 'raddr', 'status', 'pid']

	cntrs = psu.net_io_counters(nowrap=True)
	sckts = psu.net_connections()

	dict_cntrs = dict(zip(cntr_attribs, cntrs))
	dict_sckts = dict(zip(sckt_attribs, sckts))

	return dict_cntrs, dict_sckts


def get_tmp():
	temp_attribs = 'temperature'

	temp = psu.sensors_temperatures()
	dict_temp = {temp_attribs: temp}

	return dict_temp


def get_hw_data():
	hw_attribs = ['cpu', 'memory', 'disk', 'temperature']

	cpu_data = get_cpu()
	mem_data = get_mem()
	disk_data = get_dsk()
	temperature_data = get_tmp()

	data = [cpu_data, mem_data, disk_data, temperature_data]
	hw_data = dict(zip(hw_attribs, data))

	return hw_data
